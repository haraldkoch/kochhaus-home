---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/source.toolkit.fluxcd.io/helmrepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: argo
spec:
  interval: 1h
  url: https://argoproj.github.io/argo-helm
---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: argocd
spec:
  interval: 30m
  chart:
    spec:
      chart: argo-cd
      version: 8.3.7
      sourceRef:
        kind: HelmRepository
        name: argo
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      strategy: rollback
      retries: 3
  values:
    configs:
      cm:
        admin.enabled: false
        application.resourceTrackingMethod: annotation
        kustomize.buildOptions: --enable-alpha-plugins --enable-helm
        url: https://argocd.${CLUSTER_DOMAIN}
        oidc.config: |
          name: Authelia
          issuer: https://auth.${CLUSTER_DOMAIN}
          clientID: argocd
          clientSecret: ${ARGOCD_OAUTH_CLIENT_SECRET}
          cliClientID: argocd
          requestedScopes: ["openid", "profile", "email", "groups"]
          requestedIDTokenClaims: {"groups": {"essential": true}}
      rbac:
        scopes: "[groups, email]"
        policy.default: ""
        policy.csv: |
          p, role:devs, applications, get, */*, allow
          p, role:devs, applications, create, */*, allow
          p, role:devs, applications, update, */*, allow
          p, role:devs, applications, delete, */*, allow
          p, role:devs, applications, sync, */*, allow
          p, role:devs, applications, override, */*, allow
          p, role:devs, logs, get, */*, allow
          p, role:devs, projects, get, *, allow
          p, role:devs, repositories, get, *, allow
          p, role:devs, repositories, create, *, allow
          p, role:devs, repositories, update, *, allow
          p, role:devs, repositories, delete, *, allow

          g, admins, role:admin
          g, people, role:devs
      params:
        application.namespaces: argo,cicd,default
        applicationsetcontroller.namespaces: argo,cicd,default
        applicationsetcontroller.allowed.scm.providers: https://anemone.${PRIVATE_STATIC_DOMAIN}/gitea/,https://github.com/haraldkoch/
        redis.server: argocd-redis:6379
        server.insecure: true
      cmp:
        create: true
        plugins:
          argocd-vault-plugin:
            allowConcurrency: true
            discover:
              find:
                command:
                  - find
                  - "."
                  - -name
                  - kustomization.yaml
            generate:
              command:
                - sh
                - "-c"
                - "kustomize build --enable-alpha-plugins --enable-helm . | argocd-vault-plugin generate -"
            lockRepo: false
    repoServer:
      initContainers:
        - name: download-tools
          image: docker.io/library/alpine:3.22
          command: [sh, -c]
          env:
            - name: AVP_VERSION
              # FIXME renovate
              value: 1.18.1
          args:
            - >-
              wget -qO /custom-tools/argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 &&
              chmod +x /custom-tools/argocd-vault-plugin
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools
      extraContainers:
        - name: argocd-vault-plugin
          command: [/var/run/argocd/argocd-cmp-server]
          image: quay.io/argoproj/argocd:v3.1.5
          envFrom:
            - secretRef:
                name: argocd-vault-plugin-credentials
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - mountPath: /var/run/argocd
              name: var-files
            - mountPath: /home/argocd/cmp-server/plugins
              name: plugins
            - mountPath: /tmp
              name: cmp-tmp
            # Register plugins into sidecar
            - mountPath: /home/argocd/cmp-server/config/plugin.yaml
              subPath: argocd-vault-plugin.yaml
              name: argocd-cmp-cm
            # Mount tools into $PATH
            - mountPath: /usr/local/bin/argocd-vault-plugin
              name: custom-tools
              subPath: argocd-vault-plugin
      volumes:
        - name: custom-tools
          emptyDir: {}
        - name: cmp-tmp
          emptyDir: {}
        - name: argocd-cmp-cm
          configMap:
            name: argocd-cmp-cm
    dex:
      enabled: false
    redis:
      enabled: true
    applicationSet:
      allowAnyNamespace: true
