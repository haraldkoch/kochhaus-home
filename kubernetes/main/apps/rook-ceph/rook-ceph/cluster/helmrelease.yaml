---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
spec:
  interval: 30m
  timeout: 10m
  chart:
    spec:
      chart: rook-ceph-cluster
      version: v1.17.6
      sourceRef:
        kind: HelmRepository
        name: rook-ceph
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  dependsOn:
    - name: rook-ceph-operator
      namespace: rook-ceph
    - name: snapshot-controller
      namespace: storage
  values:
    monitoring:
      enabled: true
      createPrometheusRules: true
    ingress:
      dashboard:
        ingressClassName: internal
        annotations:
          hajimari.io/appName: "Rook"
          hajimari.io/icon: mdi:chess-rook
        host:
          name: rook.${CLUSTER_DOMAIN}
          path: /
    toolbox:
      enabled: true
    configOverride: |
      [global]
      bdev_enable_discard = true
      bdev_async_discard_threads = 1
      osd_class_update_on_start = false

      [mon]
      mon_data_avail_warn = 20
    cephClusterSpec:
      crashCollector:
        disable: false
      dashboard:
        enabled: true
        urlPrefix: /
        ssl: false
        prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
      mgr:
        modules:
          - name: insights
            enabled: true
          - name: pg_autoscaler
            enabled: true
          - name: rook
            enabled: true
      network:
        provider: host
        connections:
          requireMsgr2: true
      storage:
        useAllNodes: false
        useAllDevices: false
        config:
          osdsPerDevice: "1"
        nodes:
          - name: k3s0
            devices:
              - name: /dev/disk/by-id/nvme-PC601_NVMe_SK_hynix_512GB_SI97N008610707NDF-part3
          - name: k3s2
            devices:
              - name: /dev/disk/by-id/ata-SAMSUNG_MZ7LH512HALU-000H1_S4HLNF0N721023-part3
          - name: k3s3
            devices:
              - name: /dev/disk/by-id/nvme-KXG50ZNV512G_TOSHIBA_X8UF60F1F6GS-part3
      placement:
        osd:
          tolerations:
            - key: node.kubernetes.io/unschedulable
              operator: Exists
        mgr: &placement
          # nodeAffinity:
          #   requiredDuringSchedulingIgnoredDuringExecution:
          #     nodeSelectorTerms:
          #       - matchExpressions:
          #           - key: node-role.kubernetes.io/control-plane
          #             operator: Exists
          tolerations:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
        mon: *placement
      # FIXME: do I still need these
      healthCheck:
        livenessProbe:
          mon:
            probe:
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 10
          mgr:
            probe:
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 10
          osd:
            probe:
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 10
        startupProbe:
          mon:
            probe:
              initialDelaySeconds: 15
              periodSeconds: 30
              timeoutSeconds: 10
          mgr:
            probe:
              initialDelaySeconds: 15
              periodSeconds: 30
              timeoutSeconds: 10
          osd:
            probe:
              initialDelaySeconds: 15
              periodSeconds: 30
              timeoutSeconds: 10
      resources:
        mgr:
          limits:
            cpu: 500m
            memory: 640Mi
          requests:
            cpu: 50m
            memory: 320Mi
        mon:
          limits:
            cpu: 500m
            memory: 640Mi
          requests:
            cpu: 100m
            memory: 320Mi
        osd:
          limits:
            cpu: 500m
            memory: 1600Mi
          requests:
            cpu: 150m
            memory: 800Mi
        prepareosd:
          limits:
            cpu: 1000m
            memory: 400Mi
          requests:
            cpu: 50m
            memory: 200Mi
        mgr-sidecar:
          limits:
            cpu: 256m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 40Mi
        crashcollector:
          limits:
            cpu: 100m
            memory: 64M
          requests:
            cpu: 15m
            memory: 32M
        logcollector:
          limits:
            cpu: 50m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 16Mi
        cleanup:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 100Mi
    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 3
        storageClass:
          enabled: true
          name: ceph-block
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: Immediate
          mountOptions: ["discard"]
          parameters:
            imageFormat: "2"
            imageFeatures: layering
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/fstype: ext4
    cephBlockPoolsVolumeSnapshotClass:
      enabled: true
      name: csi-ceph-blockpool
      isDefault: false
      deletionPolicy: Delete
    # NOTE: After disabling the filesystem, the filesystem can be removed with the following commands:
    # ceph fs fail ceph-filesystem && ceph fs rm ceph-filesystem --yes-i-really-mean-it
    cephFileSystems: []
    # cephFileSystems:
    #   - name: ceph-filesystem
    #     spec:
    #       metadataPool:
    #         replicated:
    #           size: 3
    #       dataPools:
    #         - failureDomain: host
    #           replicated:
    #             size: 3
    #           name: data0
    #       metadataServer:
    #         activeCount: 1
    #         activeStandby: true
    #         priorityClassName: system-cluster-critical
    #         placement:
    #           topologySpreadConstraints:
    #             - maxSkew: 1
    #               topologyKey: kubernetes.io/hostname
    #               whenUnsatisfiable: DoNotSchedule
    #               labelSelector:
    #                 matchLabels:
    #                   app.kubernetes.io/name: ceph-mds
    #                   app.kubernetes.io/part-of: *cephFileSystemName
    #         resources:
    #           requests:
    #             cpu: 50m
    #             memory: 64M
    #           limits:
    #             cpu: 1000m
    #             memory: 850M
    #     storageClass:
    #       enabled: true
    #       isDefault: false
    #       name: ceph-filesystem
    #       pool: data0
    #       reclaimPolicy: Delete
    #       allowVolumeExpansion: true
    #       volumeBindingMode: Immediate
    #       parameters:
    #         csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
    #         csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
    #         csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
    #         csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
    #         csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
    #         csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
    #         csi.storage.k8s.io/fstype: ext4
    # cephFileSystemVolumeSnapshotClass:
    #   enabled: true
    #   name: csi-ceph-filesystem
    #   isDefault: false
    #   deletionPolicy: Delete
    cephObjectStores: []
      # - name: ceph-objectstore
      #   spec:
      #     metadataPool:
      #       failureDomain: host
      #       replicated:
      #         size: 3
      #     dataPool:
      #       failureDomain: host
      #       erasureCoded:
      #         dataChunks: 2
      #         codingChunks: 1
      #     preservePoolsOnDelete: true
      #     gateway:
      #       hostNetwork: false
      #       port: 80
      #       resources:
      #         requests:
      #           cpu: 250m
      #           memory: 1Gi
      #         limits:
      #           memory: 2Gi
      #       instances: 1
      #       priorityClassName: system-cluster-critical
      #     healthCheck:
      #       bucket:
      #         interval: 60s
      #   storageClass:
      #     enabled: true
      #     name: ceph-bucket
      #     reclaimPolicy: Delete
      #     volumeBindingMode: Immediate
      #     parameters:
      #       region: us-east-1
      #   ingress:
      #     enabled: true
      #     ingressClassName: internal
      #     annotations:
      #       nginx.ingress.kubernetes.io/proxy-body-size: "0"
      #       nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      #     host:
      #       name: objects.${CLUSTER_DOMAIN}
      #       path: /
