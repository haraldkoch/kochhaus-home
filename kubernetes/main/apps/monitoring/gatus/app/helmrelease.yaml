---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gatus
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      gatus:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/haraldkoch/postgres-init
              tag: 17.5@sha256:45d029ac1f219bd1d6a2d52cc2ab583d27bb9aca8cdb646dfc46553f26f03946
            envFrom: &envFrom
              - secretRef:
                  name: gatus-secret
          init-config:
            dependsOn: init-db
            image:
              repository: ghcr.io/home-operations/k8s-sidecar
              tag: 1.30.3@sha256:39cca7abcad8f1621b9462d95f7d0e60301b92fcb0ff4de0ad4561859011cddf
            env:
              FOLDER: /config
              LABEL: gatus.io/enabled
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH
            restartPolicy: Always
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
        containers:
          app:
            image:
              repository: ghcr.io/twin/gatus
              tag: v5.18.1@sha256:97525568fdef34539b1b4d015aef2d1cf6f58f1bc087443387b349940544394d
            env:
              TZ: ${TIMEZONE:=Etc/UTC}
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              WEB_PORT: &port 80
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 128Mi
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1022
            runAsGroup: 1022
            fsGroup: 1022
            fsGroupChangePolicy: OnRootMismatch
            sysctls:
              - name: net.ipv4.ping_group_range
                value: "0 2147483647"
        serviceAccount:
          identifier: gatus
    service:
      app:
        controller: gatus
        ipFamilyPolicy: PreferDualStack
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: gatus
        endpoints:
          - port: http
            metricRelabelings:
              - action: labeldrop
                regex: (pod)
              - action: replace
                sourceLabels: ["service"]
                targetLabel: instance
    ingress:
      app:
        className: internal
        annotations:
          hajimari.io/icon: mdi:eye
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Observability
          gethomepage.dev/name: Gatus
          gethomepage.dev/icon: gatus.png
        hosts:
          - host: status.${CLUSTER_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    rbac:
      roles:
        gatus:
          type: ClusterRole
          rules:
            - apiGroups: [""]
              resources: ["configmaps", "secrets"]
              verbs: ["get", "watch", "list"]
      bindings:
        gatus:
          type: ClusterRoleBinding
          roleRef:
            identifier: gatus
          subjects:
            - identifier: gatus
    serviceAccount:
      gatus: {}
    persistence:
      config:
        type: emptyDir
      config-file:
        type: configMap
        name: gatus-configmap
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
