---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  talos:
    desc: Bootstrap the Talos cluster
    summary: |
      Args:
        CLUSTER: Cluster to run command against (required)
    dir: '{{.TALOS_DIR}}'
    cmds:
      - '[ -f talsecret.sops.yaml ] || talhelper gensecret | sops --filename-override talsecret.sops.yaml --encrypt /dev/stdin > talsecret.sops.yaml'
      - talhelper genconfig
      - talhelper gencommand apply --extra-flags="--insecure" | {{.ROOT_DIR}}/scripts/fix-talos-ips.sh | bash
      - until talhelper gencommand bootstrap | bash; do sleep 10; done
      - until talhelper gencommand kubeconfig --extra-flags="{{.ROOT_DIR}}/kubernetes/{{.CLUSTER}} --force" | bash; do sleep 10; done
    preconditions:
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - which talhelper talosctl sops
    requires:
      vars: [CLUSTER]

  apps:
    desc: Bootstrap apps into the Talos cluster
    summary: |
      Args:
        CLUSTER: Cluster to run command against (required)
    # FIXME: per-cluster script?
    cmd: bash {{.SCRIPTS_DIR}}/bootstrap-apps.sh {{.CLUSTER}}
    preconditions:
      - msg: Unsupported bash version, run `brew install bash` to upgrade
        sh: '{{if eq OS "darwin"}}test -f /opt/homebrew/bin/bash{{end}}'
      #- test -f {{.KUBECONFIG}}
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - test -f {{.SCRIPTS_DIR}}/bootstrap-apps.sh
      - test -f {{.SOPS_AGE_KEY_FILE}}
    requires:
      vars: ["CLUSTER"]


  ## old ansible/flux clusters
  apps-old:
    desc: Bootstrap apps into the cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    cmds:
      - kubectl create namespace flux-system --dry-run=client -o yaml | kubectl apply --server-side --filename -
      - '{{if eq .BITBUCKET_DEPLOY_KEY_EXISTS "true"}}sops exec-file {{.BITBUCKET_DEPLOY_KEY_FILE}} "kubectl apply --server-side --filename {}"{{end}}'
      - '{{if eq .SOPS_SECRET_EXISTS "false"}}cat {{.SOPS_AGE_KEY_FILE}} | kubectl --namespace flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin{{end}}'
      - sops exec-file {{.KUBERNETES_DIR}}/{{.cluster}}/flux/meta/settings/cluster-secrets.sops.yaml "kubectl apply --server-side --filename {}"
      - kubectl apply --server-side --filename {{.KUBERNETES_DIR}}/{{.cluster}}/flux/meta/settings/cluster-settings.yaml
      - helmfile --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
    vars:
      APPLY_SECRETS:
        sh: find {{.KUBERNETES_DIR}}/{{.cluster}}/{bootstrap/apps,flux/meta} -type f -name '*.sops.yaml'
      BITBUCKET_DEPLOY_KEY_FILE: '{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.sops.yaml'
      BITBUCKET_DEPLOY_KEY_EXISTS:
        sh: test -f {{.BITBUCKET_DEPLOY_KEY_FILE}} && echo true || echo false
      KUBECONFIG: "{{.KUBERNETES_DIR}}/{{.cluster}}/kubeconfig"
      SOPS_SECRET_EXISTS:
        sh: kubectl --namespace flux-system get secret sops-age &>/dev/null && echo true || echo false
    preconditions:
      - test -f {{.KUBECONFIG}}
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/apps/helmfile.yaml
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which helmfile kubectl sops
    requires:
      vars: ["cluster"]
